- In generale, blq, lq e ffq hanno un instruction count per-pacchetto
piu' basso di iffq e biffq. Se P e C sono molto veloci (100+ Mpps),
blq risulta piu' efficiente di iffq e biffq, perche' ha bisogno di
meno istruzioni per pacchetto, al di la' di cache miss (n.b. si puo'
verificare che non ci sia tanta differenza in termini di cache miss,
usando perf stat).
In questo discorso non consideriamo lq ed ffq che vengono messi fuori
gioco dalle troppe cache miss (lq in particolare).

- In termini di API, iffq ha un vantaggio rispetto a blq: soffre
meno se P non puo' lavorare in batch (per esempio in-kernel PSPAT).
blq e' piu' costoso in questo caso perche' blq::P deve accedere a piu'
cacheline di iffq per ogni pacchetto che deve produrre.

- Se P puo' lavorare in batch, allora blq sembra comunque piu'
conveniente, perche' mentre blq::P sta preparando il batch,
blq::C puo attendere una notifica sulla cacheline del campo
'blq::read', senza infastidire P sugli slot.

- biffq::P cerca di lavorare in batch, ma comunque deve inserire
gli slot uno alla volta. Se il sistema e' fast consumer, in
contemporanea biffq::C attende notifiche sugli stessi slot su cui
biffq::P sta lavorando, quindi generando conflitti read-write.

- Sembrano esistere combinazioni per cui biffq/iffq sono migliori
  di blq:
    $ ./spscq -c0 -c1  -n2000 -P2 -C1 -t blq
    $ ./spscq -c0 -c1  -n2000 -P2 -C1 -t iffq
    $ ./spscq -c0 -c1  -n2000 -P2 -C1 -t biffq

  oppure '-P1 -C0' o '-P1 -C1', o altre situazioni di fast consumer
  a rate molto alti

- In termini di API, ffq e varianti hanno lo svantaggio che possono
  implementare una coda che ha solamente la semantica di move, visto
  che C deve azzerare gli slot. Al contrario, lq e varianti permettono
  a P di riprendersi gli slot processati, quindi permettendo una
  semantica di 'const reference'.

- In generale biffq (e in alcuni casi iffq) sembrano comportarsi
  meglio in termini di misses/packet. Questo pero' non e' abbastanza
  a rate molto alti (200+ Mpps) per via dell'instruction count.

- Con indirect payload (-M), sembra che biffq vada anche un po'
  meglio di blq, per via delle barriere.
